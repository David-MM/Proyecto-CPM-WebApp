//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Menusito.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CPMEntities : DbContext
    {
        public CPMEntities()
            : base("name=CPMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BANCO> BANCO { get; set; }
        public virtual DbSet<BODEGA> BODEGA { get; set; }
        public virtual DbSet<CHEQUE> CHEQUE { get; set; }
        public virtual DbSet<CIUDAD> CIUDAD { get; set; }
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<COBRO> COBRO { get; set; }
        public virtual DbSet<COMPRA> COMPRA { get; set; }
        public virtual DbSet<COMPRADETALLE> COMPRADETALLE { get; set; }
        public virtual DbSet<CUENTA> CUENTA { get; set; }
        public virtual DbSet<DEPARTAMENTO> DEPARTAMENTO { get; set; }
        public virtual DbSet<DEPOSITO> DEPOSITO { get; set; }
        public virtual DbSet<EMPLEADO> EMPLEADO { get; set; }
        public virtual DbSet<EXISTENCIA> EXISTENCIA { get; set; }
        public virtual DbSet<PAGO> PAGO { get; set; }
        public virtual DbSet<PAIS> PAIS { get; set; }
        public virtual DbSet<PRODUCCION> PRODUCCION { get; set; }
        public virtual DbSet<PRODUCCIONDETALLE> PRODUCCIONDETALLE { get; set; }
        public virtual DbSet<PRODUCTO> PRODUCTO { get; set; }
        public virtual DbSet<PROVEEDOR> PROVEEDOR { get; set; }
        public virtual DbSet<RECETA> RECETA { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TRANSACCION> TRANSACCION { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<VENTA> VENTA { get; set; }
        public virtual DbSet<VENTADETALLE> VENTADETALLE { get; set; }
        public virtual DbSet<View_ProductosConExistencia> View_ProductosConExistencia { get; set; }
        public virtual DbSet<vw_EmpleadosActivos> vw_EmpleadosActivos { get; set; }
        public virtual DbSet<vw_UsuariosActivos> vw_UsuariosActivos { get; set; }
    
        [DbFunction("CPMEntities", "f_EmpleadoRoll")]
        public virtual IQueryable<f_EmpleadoRoll_Result> f_EmpleadoRoll(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<f_EmpleadoRoll_Result>("[CPMEntities].[f_EmpleadoRoll](@idUser)", idUserParameter);
        }
    
        [DbFunction("CPMEntities", "Fn_Cliente")]
        public virtual IQueryable<Fn_Cliente_Result> Fn_Cliente(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_Cliente_Result>("[CPMEntities].[Fn_Cliente](@Estado)", estadoParameter);
        }
    
        [DbFunction("CPMEntities", "Fn_Proveedor")]
        public virtual IQueryable<Fn_Proveedor_Result> Fn_Proveedor(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_Proveedor_Result>("[CPMEntities].[Fn_Proveedor](@Estado)", estadoParameter);
        }
    
        public virtual ObjectResult<PRO_Bodega_Result> PRO_Bodega(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_Bodega_Result>("PRO_Bodega", estadoParameter);
        }
    
        public virtual ObjectResult<PRO_BodegaMovimientos_Result> PRO_BodegaMovimientos(string tipo)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_BodegaMovimientos_Result>("PRO_BodegaMovimientos", tipoParameter);
        }
    
        public virtual ObjectResult<PRO_C_Empleados_Result> PRO_C_Empleados()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_C_Empleados_Result>("PRO_C_Empleados");
        }
    
        public virtual ObjectResult<PRO_C_Usuario_Result> PRO_C_Usuario(string usuario, string pass)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_C_Usuario_Result>("PRO_C_Usuario", usuarioParameter, passParameter);
        }
    
        public virtual ObjectResult<PRO_CompraDetalle_Result> PRO_CompraDetalle(Nullable<int> compra)
        {
            var compraParameter = compra.HasValue ?
                new ObjectParameter("Compra", compra) :
                new ObjectParameter("Compra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_CompraDetalle_Result>("PRO_CompraDetalle", compraParameter);
        }
    
        public virtual ObjectResult<PRO_Compras_Result> PRO_Compras(string proceso)
        {
            var procesoParameter = proceso != null ?
                new ObjectParameter("Proceso", proceso) :
                new ObjectParameter("Proceso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_Compras_Result>("PRO_Compras", procesoParameter);
        }
    
        public virtual ObjectResult<PRO_Productos_Result> PRO_Productos(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_Productos_Result>("PRO_Productos", estadoParameter);
        }
    
        public virtual ObjectResult<PRO_ProductosElaborados_Result> PRO_ProductosElaborados(Nullable<int> producto)
        {
            var productoParameter = producto.HasValue ?
                new ObjectParameter("Producto", producto) :
                new ObjectParameter("Producto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_ProductosElaborados_Result>("PRO_ProductosElaborados", productoParameter);
        }
    
        public virtual ObjectResult<PRO_VentaDetalle_Result> PRO_VentaDetalle(Nullable<int> venta)
        {
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_VentaDetalle_Result>("PRO_VentaDetalle", ventaParameter);
        }
    
        public virtual ObjectResult<PRO_Ventas_Result> PRO_Ventas(string estado)
        {
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO_Ventas_Result>("PRO_Ventas", estadoParameter);
        }
    
        public virtual int sp_AgregarBanco(string nombre, string telefono, string correo)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarBanco", nombreParameter, telefonoParameter, correoParameter);
        }
    
        public virtual int sp_AgregarBodega(Nullable<int> idUsuario, Nullable<int> idCiudad, string nombre, string direccion, string telefono)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarBodega", idUsuarioParameter, idCiudadParameter, nombreParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int sp_AgregarCliente(Nullable<int> idCiudad, string nombre, string contacto, string tel, string correo, Nullable<double> limiteCredito, Nullable<double> descuento)
        {
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("idCiudad", idCiudad) :
                new ObjectParameter("idCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var limiteCreditoParameter = limiteCredito.HasValue ?
                new ObjectParameter("LimiteCredito", limiteCredito) :
                new ObjectParameter("LimiteCredito", typeof(double));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarCliente", idCiudadParameter, nombreParameter, contactoParameter, telParameter, correoParameter, limiteCreditoParameter, descuentoParameter);
        }
    
        public virtual int sp_AgregarCuenta(string nCuenta, Nullable<int> idBanco, Nullable<double> saldo)
        {
            var nCuentaParameter = nCuenta != null ?
                new ObjectParameter("NCuenta", nCuenta) :
                new ObjectParameter("NCuenta", typeof(string));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("Saldo", saldo) :
                new ObjectParameter("Saldo", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarCuenta", nCuentaParameter, idBancoParameter, saldoParameter);
        }
    
        public virtual int sp_AgregarEmpleado(Nullable<int> idDepto, string nombre)
        {
            var idDeptoParameter = idDepto.HasValue ?
                new ObjectParameter("idDepto", idDepto) :
                new ObjectParameter("idDepto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarEmpleado", idDeptoParameter, nombreParameter);
        }
    
        public virtual int sp_AgregarProducto(string nombre, Nullable<int> existenciaMinima, Nullable<double> precio)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var existenciaMinimaParameter = existenciaMinima.HasValue ?
                new ObjectParameter("ExistenciaMinima", existenciaMinima) :
                new ObjectParameter("ExistenciaMinima", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarProducto", nombreParameter, existenciaMinimaParameter, precioParameter);
        }
    
        public virtual int sp_AgregarProveedor(Nullable<int> idCiudad, string nombre, string contacto, string tel, string correo, Nullable<double> limiteCredito)
        {
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("idCiudad", idCiudad) :
                new ObjectParameter("idCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var limiteCreditoParameter = limiteCredito.HasValue ?
                new ObjectParameter("LimiteCredito", limiteCredito) :
                new ObjectParameter("LimiteCredito", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarProveedor", idCiudadParameter, nombreParameter, contactoParameter, telParameter, correoParameter, limiteCreditoParameter);
        }
    
        public virtual int sp_AgregarReceta(Nullable<int> idProducto, Nullable<int> idProductoMaterial, Nullable<int> cantidad)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idProductoMaterialParameter = idProductoMaterial.HasValue ?
                new ObjectParameter("IdProductoMaterial", idProductoMaterial) :
                new ObjectParameter("IdProductoMaterial", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarReceta", idProductoParameter, idProductoMaterialParameter, cantidadParameter);
        }
    
        public virtual int sp_AgregarUsuario(Nullable<int> idEmpleado, string nombre, string contraseña, Nullable<int> rol)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarUsuario", idEmpleadoParameter, nombreParameter, contraseñaParameter, rolParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_Bancos_Result> SP_Bancos(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Bancos_Result>("SP_Bancos", estadoParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<SP_Cuentas_Result> SP_Cuentas(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Cuentas_Result>("SP_Cuentas", estadoParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_EditarBanco(Nullable<int> idBanco, string nombre, string telefono, string correo)
        {
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("idBanco", idBanco) :
                new ObjectParameter("idBanco", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarBanco", idBancoParameter, nombreParameter, telefonoParameter, correoParameter);
        }
    
        public virtual int sp_EditarBodega(Nullable<int> idBodega, Nullable<int> idUsuario, Nullable<int> idCiudad, string nombre, string direccion, string telefono)
        {
            var idBodegaParameter = idBodega.HasValue ?
                new ObjectParameter("IdBodega", idBodega) :
                new ObjectParameter("IdBodega", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarBodega", idBodegaParameter, idUsuarioParameter, idCiudadParameter, nombreParameter, direccionParameter, telefonoParameter);
        }
    
        public virtual int sp_EditarCliente(Nullable<int> idCliente, Nullable<int> idCiudad, string nombre, string contacto, string tel, string correo, Nullable<double> limiteCredito, Nullable<double> descuento)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("idCiudad", idCiudad) :
                new ObjectParameter("idCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var limiteCreditoParameter = limiteCredito.HasValue ?
                new ObjectParameter("LimiteCredito", limiteCredito) :
                new ObjectParameter("LimiteCredito", typeof(double));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarCliente", idClienteParameter, idCiudadParameter, nombreParameter, contactoParameter, telParameter, correoParameter, limiteCreditoParameter, descuentoParameter);
        }
    
        public virtual int sp_EditarCuenta(Nullable<int> idCuenta, string nCuenta, Nullable<int> idBanco, Nullable<double> saldo)
        {
            var idCuentaParameter = idCuenta.HasValue ?
                new ObjectParameter("IdCuenta", idCuenta) :
                new ObjectParameter("IdCuenta", typeof(int));
    
            var nCuentaParameter = nCuenta != null ?
                new ObjectParameter("NCuenta", nCuenta) :
                new ObjectParameter("NCuenta", typeof(string));
    
            var idBancoParameter = idBanco.HasValue ?
                new ObjectParameter("IdBanco", idBanco) :
                new ObjectParameter("IdBanco", typeof(int));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("Saldo", saldo) :
                new ObjectParameter("Saldo", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarCuenta", idCuentaParameter, nCuentaParameter, idBancoParameter, saldoParameter);
        }
    
        public virtual int sp_EditarEmpleado(Nullable<int> idEmpleado, string nombre, Nullable<int> idDepto)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idDeptoParameter = idDepto.HasValue ?
                new ObjectParameter("idDepto", idDepto) :
                new ObjectParameter("idDepto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarEmpleado", idEmpleadoParameter, nombreParameter, idDeptoParameter);
        }
    
        public virtual int sp_EditarProducto(Nullable<int> idProducto, string nombre, Nullable<int> existenciaMinima, Nullable<double> precio)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var existenciaMinimaParameter = existenciaMinima.HasValue ?
                new ObjectParameter("ExistenciaMinima", existenciaMinima) :
                new ObjectParameter("ExistenciaMinima", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarProducto", idProductoParameter, nombreParameter, existenciaMinimaParameter, precioParameter);
        }
    
        public virtual int sp_EditarProveedor(Nullable<int> idProveedor, Nullable<int> idCiudad, string nombre, string contacto, string tel, string correo, Nullable<double> limiteCredito)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("idCiudad", idCiudad) :
                new ObjectParameter("idCiudad", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var telParameter = tel != null ?
                new ObjectParameter("Tel", tel) :
                new ObjectParameter("Tel", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var limiteCreditoParameter = limiteCredito.HasValue ?
                new ObjectParameter("LimiteCredito", limiteCredito) :
                new ObjectParameter("LimiteCredito", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarProveedor", idProveedorParameter, idCiudadParameter, nombreParameter, contactoParameter, telParameter, correoParameter, limiteCreditoParameter);
        }
    
        public virtual int sp_EditarUsuario(Nullable<int> idUsuario, string nombre, string contraseña, Nullable<int> rol)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EditarUsuario", idUsuarioParameter, nombreParameter, contraseñaParameter, rolParameter);
        }
    
        public virtual int sp_Eliminar(string tabla, Nullable<int> id)
        {
            var tablaParameter = tabla != null ?
                new ObjectParameter("Tabla", tabla) :
                new ObjectParameter("Tabla", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Eliminar", tablaParameter, idParameter);
        }
    
        public virtual int sp_EliminarCliente(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EliminarCliente", idClienteParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_OrdenCompra(Nullable<int> idUsuario, Nullable<int> idProveedor, string tipo)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrdenCompra", idUsuarioParameter, idProveedorParameter, tipoParameter);
        }
    
        public virtual int sp_OrdenCompraDetalle(Nullable<int> idCompra, Nullable<int> idproducto, Nullable<int> idBodega, Nullable<System.DateTime> fechaVencimiento, Nullable<int> cantidad, Nullable<double> valor, Nullable<double> iSV)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("IdCompra", idCompra) :
                new ObjectParameter("IdCompra", typeof(int));
    
            var idproductoParameter = idproducto.HasValue ?
                new ObjectParameter("Idproducto", idproducto) :
                new ObjectParameter("Idproducto", typeof(int));
    
            var idBodegaParameter = idBodega.HasValue ?
                new ObjectParameter("IdBodega", idBodega) :
                new ObjectParameter("IdBodega", typeof(int));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(double));
    
            var iSVParameter = iSV.HasValue ?
                new ObjectParameter("ISV", iSV) :
                new ObjectParameter("ISV", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrdenCompraDetalle", idCompraParameter, idproductoParameter, idBodegaParameter, fechaVencimientoParameter, cantidadParameter, valorParameter, iSVParameter);
        }
    
        public virtual int sp_OrdenIstTransaccion(Nullable<int> idbodega, Nullable<int> idOrden, Nullable<int> idProduto, Nullable<int> idUser, string tipo, Nullable<System.DateTime> fecha, Nullable<int> cantidad, string descripcion)
        {
            var idbodegaParameter = idbodega.HasValue ?
                new ObjectParameter("idbodega", idbodega) :
                new ObjectParameter("idbodega", typeof(int));
    
            var idOrdenParameter = idOrden.HasValue ?
                new ObjectParameter("idOrden", idOrden) :
                new ObjectParameter("idOrden", typeof(int));
    
            var idProdutoParameter = idProduto.HasValue ?
                new ObjectParameter("idProduto", idProduto) :
                new ObjectParameter("idProduto", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrdenIstTransaccion", idbodegaParameter, idOrdenParameter, idProdutoParameter, idUserParameter, tipoParameter, fechaParameter, cantidadParameter, descripcionParameter);
        }
    
        public virtual int sp_Produccion(Nullable<int> idUsuario, Nullable<int> idProducto, Nullable<int> cantidad, Nullable<int> bodegaid)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var bodegaidParameter = bodegaid.HasValue ?
                new ObjectParameter("Bodegaid", bodegaid) :
                new ObjectParameter("Bodegaid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Produccion", idUsuarioParameter, idProductoParameter, cantidadParameter, bodegaidParameter);
        }
    
        public virtual int sp_ProduccionDetalle(Nullable<int> idProduccion, Nullable<int> idProductoMaterial, Nullable<int> idBodega, Nullable<System.DateTime> fechaVencimiento, Nullable<int> cantidad)
        {
            var idProduccionParameter = idProduccion.HasValue ?
                new ObjectParameter("IdProduccion", idProduccion) :
                new ObjectParameter("IdProduccion", typeof(int));
    
            var idProductoMaterialParameter = idProductoMaterial.HasValue ?
                new ObjectParameter("IdProductoMaterial", idProductoMaterial) :
                new ObjectParameter("IdProductoMaterial", typeof(int));
    
            var idBodegaParameter = idBodega.HasValue ?
                new ObjectParameter("IdBodega", idBodega) :
                new ObjectParameter("IdBodega", typeof(int));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProduccionDetalle", idProduccionParameter, idProductoMaterialParameter, idBodegaParameter, fechaVencimientoParameter, cantidadParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_Requisito(Nullable<int> idUsuario, Nullable<int> idCliente, string tipo)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Requisito", idUsuarioParameter, idClienteParameter, tipoParameter);
        }
    
        public virtual int sp_RequisitoDetalle(Nullable<int> idVenta, Nullable<int> idProducto, Nullable<int> idBodega, Nullable<int> cantidad, Nullable<double> valor, Nullable<double> iSV)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var idBodegaParameter = idBodega.HasValue ?
                new ObjectParameter("IdBodega", idBodega) :
                new ObjectParameter("IdBodega", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(double));
    
            var iSVParameter = iSV.HasValue ?
                new ObjectParameter("ISV", iSV) :
                new ObjectParameter("ISV", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RequisitoDetalle", idVentaParameter, idProductoParameter, idBodegaParameter, cantidadParameter, valorParameter, iSVParameter);
        }
    
        public virtual int sp_UpdProcesoCompra(Nullable<int> idCompra)
        {
            var idCompraParameter = idCompra.HasValue ?
                new ObjectParameter("idCompra", idCompra) :
                new ObjectParameter("idCompra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdProcesoCompra", idCompraParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> Validar_Usuario(string usuarioname, string psw)
        {
            var usuarionameParameter = usuarioname != null ?
                new ObjectParameter("Usuarioname", usuarioname) :
                new ObjectParameter("Usuarioname", typeof(string));
    
            var pswParameter = psw != null ?
                new ObjectParameter("Psw", psw) :
                new ObjectParameter("Psw", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Validar_Usuario", usuarionameParameter, pswParameter);
        }
    
        public virtual ObjectResult<SP_ConsultarProductoEnBodega_Result> SP_ConsultarProductoEnBodega(Nullable<int> produnto)
        {
            var produntoParameter = produnto.HasValue ?
                new ObjectParameter("Produnto", produnto) :
                new ObjectParameter("Produnto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ConsultarProductoEnBodega_Result>("SP_ConsultarProductoEnBodega", produntoParameter);
        }
    
        public virtual ObjectResult<SP_ProductosEnBodegaFecha_Result> SP_ProductosEnBodegaFecha(Nullable<int> pro, Nullable<int> bod)
        {
            var proParameter = pro.HasValue ?
                new ObjectParameter("Pro", pro) :
                new ObjectParameter("Pro", typeof(int));
    
            var bodParameter = bod.HasValue ?
                new ObjectParameter("Bod", bod) :
                new ObjectParameter("Bod", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductosEnBodegaFecha_Result>("SP_ProductosEnBodegaFecha", proParameter, bodParameter);
        }
    
        public virtual ObjectResult<SP_ListarCuentas_Result> SP_ListarCuentas(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarCuentas_Result>("SP_ListarCuentas", estadoParameter);
        }
    
        public virtual int sp_AgregarCheque(Nullable<int> idUsuario, Nullable<int> idCuenta, Nullable<int> idProveedor, Nullable<double> valor)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idCuentaParameter = idCuenta.HasValue ?
                new ObjectParameter("IdCuenta", idCuenta) :
                new ObjectParameter("IdCuenta", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarCheque", idUsuarioParameter, idCuentaParameter, idProveedorParameter, valorParameter);
        }
    
        public virtual ObjectResult<SP_Cheques_Result> SP_Cheques()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Cheques_Result>("SP_Cheques");
        }
    
        public virtual ObjectResult<SP_Deposito_Result> SP_Deposito()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Deposito_Result>("SP_Deposito");
        }
    
        public virtual int sp_AgregarDeposito(Nullable<int> idUsuario, Nullable<int> idCuenta, Nullable<int> idCliente, Nullable<double> valor)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var idCuentaParameter = idCuenta.HasValue ?
                new ObjectParameter("IdCuenta", idCuenta) :
                new ObjectParameter("IdCuenta", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AgregarDeposito", idUsuarioParameter, idCuentaParameter, idClienteParameter, valorParameter);
        }
    
        [DbFunction("CPMEntities", "Fn_ListaReceta")]
        public virtual IQueryable<Fn_ListaReceta_Result> Fn_ListaReceta(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ListaReceta_Result>("[CPMEntities].[Fn_ListaReceta](@IdProducto)", idProductoParameter);
        }
    
        public virtual ObjectResult<SP_ListarProducosConOsinReceta_Result> SP_ListarProducosConOsinReceta(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarProducosConOsinReceta_Result>("SP_ListarProducosConOsinReceta", estadoParameter);
        }
    
        public virtual ObjectResult<SP_ProductoFiltrado_Result> SP_ProductoFiltrado(Nullable<int> estado)
        {
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProductoFiltrado_Result>("SP_ProductoFiltrado", estadoParameter);
        }
    
        public virtual ObjectResult<SP_ConsultarDetalleTransaccion_Result> SP_ConsultarDetalleTransaccion(Nullable<int> iD, string tabla, Nullable<int> user, Nullable<int> rol)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var tablaParameter = tabla != null ?
                new ObjectParameter("tabla", tabla) :
                new ObjectParameter("tabla", typeof(string));
    
            var userParameter = user.HasValue ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(int));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("Rol", rol) :
                new ObjectParameter("Rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ConsultarDetalleTransaccion_Result>("SP_ConsultarDetalleTransaccion", iDParameter, tablaParameter, userParameter, rolParameter);
        }
    
        public virtual ObjectResult<sp_ListaDeOrdenCompra_Result> sp_ListaDeOrdenCompra()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListaDeOrdenCompra_Result>("sp_ListaDeOrdenCompra");
        }
    
        public virtual ObjectResult<sp_ListaDeProduccion_Result> sp_ListaDeProduccion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListaDeProduccion_Result>("sp_ListaDeProduccion");
        }
    
        public virtual ObjectResult<SP_ListarTransaccionesPendientes_Result> SP_ListarTransaccionesPendientes(string filtro)
        {
            var filtroParameter = filtro != null ?
                new ObjectParameter("filtro", filtro) :
                new ObjectParameter("filtro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListarTransaccionesPendientes_Result>("SP_ListarTransaccionesPendientes", filtroParameter);
        }
    }
}
